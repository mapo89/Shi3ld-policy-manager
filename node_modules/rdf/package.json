{
  "name": "rdf",
  "description": "RDF datatype integration, RDF Interfaces API, and utility functions",
  "homepage": "https://github.com/Acubed/node-rdf",
  "version": "2.1.1",
  "author": {
    "name": "Austin Wright"
  },
  "keywords": [
    "RDF",
    "RDF Interfaces",
    "IRI",
    "Turtle"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Acubed/node-rdf.git",
    "web": "https://github.com/Acubed/node-rdf"
  },
  "main": "lib/rdf.js",
  "scripts": {
    "test": "vows"
  },
  "licenses": [
    {
      "type": "Public domain",
      "url": "http://unlicense.org/"
    }
  ],
  "readme": "# RDF Interfaces implementation for Node.js\n\nAn RDF Interfaces implementation in ECMAScript, designed for Node.js, to implement RDF datatypes with Javascript types and provide related APIs and in-memory utilities.\n\nThis implements:\n\n* http://www.w3.org/TR/2011/WD-rdf-interfaces-20110510/ (Working draft)\n* http://www.w3.org/TR/2013/CR-turtle-20130219/ (Candidate Recommendation)\n\nSee also:\n\n* http://www.w3.org/TR/2011/WD-rdfa-api-20110419/ (Working draft)\n\nImplementation largely adapted from webr3's js3, rdfa-api, and rdf-api implementations:\n\n* https://github.com/webr3/rdfa-api\n* https://github.com/webr3/js3\n\nThis is free and unencumbered software released into the public domain. For information, see <http://unlicense.org/>.\n\n## Usage\n\nThe ultimate documentation is the source code. The lib/rdf.js file should be especially useful.\n\n### RDFNode\n\n`rdf.Triple`, `rdf.RDFNode`, `rdf.BlankNode`, `rdf.Literal` are implemented as defined under [RDF Interfaces: Basic Node Types](http://www.w3.org/TR/2011/WD-rdf-interfaces-20110510/#basic-node-types). Standard strings are used in place of NamedNode, and `rdf.IRI` is available for more complex manipulations of the URI structure.\n\n### IndexedGraph\n\nAn implementation of [RDF Interfaces: Graph](http://www.w3.org/TR/2011/WD-rdf-interfaces-20110510/#idl-def-Graph) that stores triples in an Array. This is useful for quick inserts and iterating the complete list of triples.\n\n### TripletGraph\n\nAn implementation of [RDF Interfaces: Graph](http://www.w3.org/TR/2011/WD-rdf-interfaces-20110510/#idl-def-Graph) with fast querying on any combination of subject, predicate, or object, using three indexes.\n\n### TurtleParser\n\nAn implementation of [the Data parser API of RDF Interfaces](http://www.w3.org/TR/2011/WD-rdf-interfaces-20110510/#parsing-and-serializing-data).\n\n\tvar turtleParser = new rdf.TurtleParser(environment);\n\tturtleParser.parse(turtle, callback, base, filter, graph);\n\nWhere:\n\n* `environment` is the optional RDF Environment that will resolve prefixes and create bnodes. If left out, a new, empty environment will be created. The enviornment is accessible from the `environment` property.\n* `turtle` is the document body to be processed.\n* `callback` is an optional function(Graph) to be called when processing is completed. This should normally be undefined, the parser is fully synchronous and processing is completed after the parse() function returns.\n* `base` is the base URI that relative URIs will be resolved against.\n* `filter` is an optional function(Triple) that will restrict which triples are added to the output graph. The function takes an input Triple and returns true to include the triple in the output graph.\n* `graph` is an optional Graph that triples will be add()ed to. If left out, a new IndexedGraph will be used.\n\nSince @base and @prefix directives modify the environment passed to TurtleParser, it's recommended a new TurtleParser be used for each document.\n\n### RDF Environment\n\nThe RDF Environment is the context that bnodes are described relative to, and where namespaces/prefixes are defined. The API implements the [RDF Environment API of RDF Interfaces](http://www.w3.org/TR/2011/WD-rdf-interfaces-20110510/#rdf-environment-interfaces).\n\nThe rdf module creates one such global environment by default, accessible at `rdf.environment`. Others are created where necessary, e.g. when parsing a Turtle document, and may be created using `new rdf.RDFEnvironment`.\n\n### Builtins\n\nInstead of using NamedNode, URIs by default are represented as plain strings. The RDFNode interface may be overloaded onto the standard String object using `rdf.setBuiltins()` or onto a particular prototype by using:\n\n\trdf.setObjectProperties(Object.prototype);\n\trdf.setStringProperties(String.prototype);\n\trdf.setArrayProperties(Array.prototype);\n\trdf.setBooleanProperties(Boolean.prototype);\n\trdf.setDateProperties(Date.prototype);\n\trdf.setNumberProperties(Number.prototype);\n\nas done in the setBuiltins function call in `lib/Builtins.js`.\n\nThis extends the prototype definitions to act as native RDF types as well, for example:\n\n\ttrue.toNT();         // \"true\"^^<http://www.w3.org/2001/XMLSchema#boolean>\n\t(12 * 1.4).toNT();   // \"12.3\"^^<http://www.w3.org/2001/XMLSchema#decimal>\n\n### Object Builtins\n\nAny two values may be compared with each other using the `equals` method:\n\n\t(true).equals(rdf.environment.createLiteral('true', null, 'xsd:boolean'.resolve()) // true\n\nThe node type may be queried with the `nodeType` method:\n\n\t\"_:bnode\".nodeType()\n\t\"http://example.com/\".nodeType()\n\nAn object may be assigned a URI and parsed for triples with the `ref` method:\n\n\tvar structure =\n\t\t{ 'dbp:dateOfBirth': '1879-03-14'.tl('xsd:date')\n\t\t, 'foaf:depictation': 'http://en.wikipedia.org/wiki/Image:Albert_Einstein_Head.jpg'\n\t\t}.ref('dbr:Albert_Einstein');\n\n`ref` may be called without any argument to create a BlankNode.\n\nThe resulting object has a number of methods:\n\n* `structure.n3()` returns a Turtle/N3 document close to the original structure.\n* `structure.toNT()` returns an N-Triples formatted list of triples.\n* `structure.graphify()` returns an IndexedGraph of triples.\n\nIf multiple properties with the same predicate need to be added, put the multiple values in an Array:\n\n\t{a: ['foaf:Person']}.ref()\n\nAn Array may also be used to make an RDF Collection (linked list), with the `toList` method:\n\n\t['rdfs:Class', 'rdfs:Resource'].toList()\n\n### String Builtins\n\nStrings may be used in place of a NamedNode and BlankNode, and have the same properties. There are the following methods:\n\n* `tl(type)` creates a typed literal out of the given value.\n* `l(lang)` creates a standard literal, with an optional language value.\n* `resolve()` resolves a CURIE/term to an IRI. Unlike the enviornment/profile method, this returns the original string if unsuccessful (for instance, if the string is already a URI).\n\nURIs passed to these functions may be CURIEs and are resolved with the global `rdf.environment`.\n\n## Tests\n\nA vows test suite is found in the tests directory.\n",
  "readmeFilename": "README.md",
  "_id": "rdf@2.1.1",
  "dist": {
    "shasum": "43fa6fa925c539acdc8cd23149ce493fef37a87b"
  },
  "_from": "rdf@",
  "_resolved": "https://registry.npmjs.org/rdf/-/rdf-2.1.1.tgz"
}
